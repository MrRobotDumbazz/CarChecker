openapi: 3.0.3
info:
  title: Car Status Detection API
  description: |
    API для системы определения состояния автомобиля по фотографии.

    ## Архитектура системы
    - **Backend (Go)**: HTTP API для загрузки изображений и получения результатов
    - **ML Service (Python)**: Анализ изображений автомобилей
    - **Frontend**: Веб-интерфейс для пользователей

    ## Workflow
    1. Загрузить изображение автомобиля через `POST /api/v1/images/upload`
    2. Запустить анализ через `POST /api/v1/predict/{image_id}`
    3. Получить результат через `GET /api/v1/predictions/{prediction_id}`

    ## ML Service Requirements
    ML сервис должен реализовать endpoint `POST /api/predict` который принимает путь к изображению.
  version: 1.0.0
  contact:
    name: Car Status Detection Team
    email: team@carchecker.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081
    description: Development server
  - url: http://localhost:8000
    description: ML Service (Python)

paths:
  /:
    get:
      summary: API Information
      description: Возвращает информацию о сервисе и список доступных endpoints
      tags: [System]
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: car-status-backend
                  version:
                    type: string
                    example: 1.0.0
                  status:
                    type: string
                    example: running
                  endpoints:
                    type: object

  /api/v1/health:
    get:
      summary: Health Check
      description: Проверяет состояние всех компонентов системы (БД, ML сервис)
      tags: [Health]
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/health/ready:
    get:
      summary: Readiness Probe
      description: Проверяет готовность сервиса к приему запросов
      tags: [Health]
      responses:
        '200':
          description: Service is ready
        '503':
          description: Service is not ready

  /api/v1/health/live:
    get:
      summary: Liveness Probe
      description: Проверяет работоспособность сервиса
      tags: [Health]
      responses:
        '200':
          description: Service is alive

  /api/v1/images/upload:
    post:
      summary: Upload Car Image
      description: |
        Загружает изображение автомобиля для анализа.

        **Требования к изображению:**
        - Формат: JPEG, JPG, PNG
        - Максимальный размер: 10MB
        - Должно содержать изображение автомобиля
      tags: [Images]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Файл изображения автомобиля
              required: [image]
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  id: "f6d4aae3-ce61-42b4-ad24-e9c9b77586f6"
                  filename: "9765223e-6f48-4e0e-883b-1e60b68dd0b8.jpg"
                  original_name: "my_car.jpg"
                  file_size: 7980
                  mime_type: "image/jpeg"
                  uploaded_at: "2025-09-13T14:34:21.020245344+05:00"
                message: "Image uploaded successfully"
                timestamp: "2025-09-13T14:34:21.030587952+05:00"
        '400':
          description: Invalid file or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/images/{id}:
    get:
      summary: Get Image Info
      description: Получает информацию о загруженном изображении
      tags: [Images]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID изображения
          schema:
            type: string
            format: uuid
            example: "f6d4aae3-ce61-42b4-ad24-e9c9b77586f6"
      responses:
        '200':
          description: Image information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid UUID format
        '404':
          description: Image not found

    delete:
      summary: Delete Image
      description: Удаляет изображение и все связанные предсказания
      tags: [Images]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Image deleted successfully
        '400':
          description: Invalid UUID format
        '404':
          description: Image not found

  /api/v1/predict/{image_id}:
    post:
      summary: Analyze Car Image
      description: |
        Запускает анализ состояния автомобиля на изображении.

        **Что анализируется:**
        - **Чистота**: clean/dirty с уровнем уверенности
        - **Целостность**: intact/damaged с уровнем уверенности

        **Режимы работы:**
        - **Синхронный**: если ML сервис быстрый (<5 сек)
        - **Асинхронный**: через очереди для длительного анализа
      tags: [Predictions]
      parameters:
        - name: image_id
          in: path
          required: true
          description: UUID изображения для анализа
          schema:
            type: string
            format: uuid
            example: "f6d4aae3-ce61-42b4-ad24-e9c9b77586f6"
      responses:
        '200':
          description: Prediction completed (synchronous mode)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionResult'
        '202':
          description: Prediction queued (asynchronous mode)
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    example: "queued"
                  message:
                    type: string
                    example: "Prediction job has been queued for processing"
        '400':
          description: Invalid image ID
        '404':
          description: Image not found
        '500':
          description: ML service error

  /api/v1/predictions/{id}:
    get:
      summary: Get Prediction Result
      description: Получает результат анализа изображения
      tags: [Predictions]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID предсказания
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Prediction result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionResult'
        '400':
          description: Invalid prediction ID
        '404':
          description: Prediction not found

  /api/v1/predictions/stats:
    get:
      summary: Prediction Statistics
      description: Возвращает статистику предсказаний за последние 24 часа
      tags: [Predictions]
      responses:
        '200':
          description: Prediction statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 150
                      completed:
                        type: integer
                        example: 120
                      failed:
                        type: integer
                        example: 5
                      pending:
                        type: integer
                        example: 20
                      processing:
                        type: integer
                        example: 5
                      avg_processing_time_ms:
                        type: number
                        example: 2500.5
                  message:
                    type: string
                  timestamp:
                    type: string

  # ML Service Endpoints (для Python команды)
  /api/predict:
    post:
      summary: "[ML Service] Analyze Car Image"
      description: |
        **Endpoint для ML команды (Python)**

        Этот endpoint должен быть реализован в Python ML сервисе на порту 8000.
        Go backend будет отправлять сюда запросы для анализа изображений.

        **Требования к реализации:**
        - Принимать POST requests на `/api/predict`
        - Читать изображение по переданному пути
        - Возвращать результат анализа в указанном формате
      servers:
        - url: http://localhost:8000
          description: ML Service (Python)
      tags: [ML Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image_path:
                  type: string
                  example: "/shared/uploads/9765223e-6f48-4e0e-883b-1e60b68dd0b8.jpg"
                  description: "Абсолютный путь к файлу изображения"
                model_version:
                  type: string
                  example: "v1.2.0"
                  description: "Опциональная версия модели"
              required: [image_path]
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MLPredictionResponse'
              example:
                success: true
                cleanliness:
                  status: "clean"
                  confidence: 0.8765
                integrity:
                  status: "intact"
                  confidence: 0.9234
                processing_time_ms: 2450
                model_version: "v1.2.0"
        '400':
          description: Invalid request or image format
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid image format or corrupted file"
        '500':
          description: ML processing error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Model inference failed"

components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Invalid input parameter"
        timestamp:
          type: string
          format: date-time

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        service:
          type: string
          example: "car-status-backend"
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          properties:
            database:
              type: string
              example: "ok"
            ml_service:
              type: string
              example: "ok"

    PredictionResult:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
            image_id:
              type: string
              format: uuid
            cleanliness:
              type: object
              properties:
                status:
                  type: string
                  enum: [clean, dirty]
                  example: "clean"
                confidence:
                  type: number
                  minimum: 0
                  maximum: 1
                  example: 0.8765
            integrity:
              type: object
              properties:
                status:
                  type: string
                  enum: [intact, damaged]
                  example: "intact"
                confidence:
                  type: number
                  minimum: 0
                  maximum: 1
                  example: 0.9234
            processing_time_ms:
              type: integer
              example: 2450
            model_version:
              type: string
              example: "v1.2.0"
            status:
              type: string
              enum: [pending, processing, completed, failed]
              example: "completed"
            created_at:
              type: string
              format: date-time
            completed_at:
              type: string
              format: date-time

    MLPredictionResponse:
      type: object
      description: "Response format that ML service should return"
      properties:
        success:
          type: boolean
          example: true
        cleanliness:
          type: object
          properties:
            status:
              type: string
              enum: [clean, dirty]
              example: "clean"
            confidence:
              type: number
              minimum: 0
              maximum: 1
              example: 0.8765
        integrity:
          type: object
          properties:
            status:
              type: string
              enum: [intact, damaged]
              example: "intact"
            confidence:
              type: number
              minimum: 0
              maximum: 1
              example: 0.9234
        processing_time_ms:
          type: integer
          minimum: 0
          example: 2450
        model_version:
          type: string
          example: "v1.2.0"
        error:
          type: string
          description: "Error message if success=false"
          example: "Model inference failed"

tags:
  - name: System
    description: System information and metadata
  - name: Health
    description: Health checks and monitoring
  - name: Images
    description: Image upload and management
  - name: Predictions
    description: Car status analysis and predictions
  - name: ML Service
    description: Endpoints for ML team to implement